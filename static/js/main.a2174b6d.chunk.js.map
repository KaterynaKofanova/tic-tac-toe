{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","index.js"],"names":["Square","value","onClick","style","className","Board","squares","map","square","index","key","Game","useState","Array","fill","setSquares","stepNumber","setStepNumber","xIsNext","setXisNext","nextPlayer","winner","lines","i","length","a","b","c","calculateWinner","setTimeout","swal","button","squaresCopy","color","ReactDom","render","document","getElementById"],"mappings":"2OAYeA,EATA,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QACpBC,EAAQF,GAAe,QACvB,OACI,4BAAQG,UAAWD,EAAOD,QAASA,GAC9BD,ICOEI,EAVD,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,QAASJ,EAAa,EAAbA,QACrB,OACI,yBAAKE,UAAU,SACVE,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACT,kBAAC,EAAD,CAAQC,IAAKD,EAAOR,MAAOO,EAAQN,QAAS,kBAAMA,EAAQO,W,gBCiB1E,IAqDeE,EArDF,WAAM,IAAD,EACgBC,mBAAS,IAAIC,MAAM,GAAGC,KAAK,OAD3C,mBACPR,EADO,KACES,EADF,OAEsBH,mBAAS,GAF/B,mBAEPI,EAFO,KAEKC,EAFL,OAGgBL,oBAAS,GAHzB,mBAGPM,EAHO,KAGEC,EAHF,KAIRC,EAAaF,EAAU,IAAM,IAC7BG,EAzBV,SAAyBf,GAWrB,IAVA,IAAMgB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BE,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIrB,EAAQmB,IAAMnB,EAAQmB,KAAOnB,EAAQoB,IAAMpB,EAAQmB,KAAOnB,EAAQqB,GACpE,OAAOrB,EAAQmB,GAGnB,OAAO,KAQQG,CAAgBtB,GAuC/B,OAtBIe,GACFQ,YAAW,WACTC,IAAK,iBAAD,OAAkBT,EAAlB,mCAA6D,UAAW,CAC1EU,OAAQ,qBAEVhB,EAAW,IAAIF,MAAM,GAAGC,KAAK,OAC7BK,GAAW,GACXF,EAAc,KACb,KAGY,IAAbD,IACFa,YAAY,WACVC,IAAK,eAAD,8BAAiD,OAAQ,CAC3DC,OAAQ,qBAEVhB,EAAW,IAAIF,MAAM,GAAGC,KAAK,OAC7BK,GAAW,KACV,KACHF,EAAc,IAId,yBAAKb,UAAU,QACb,gDACA,kBAAC,EAAD,CAAOE,QAASA,EAASJ,QAxCT,SAACO,GACnB,GAAIH,EAAQG,GACVqB,IAAK,kCAAD,mCAAyE,QAAS,CACpFC,OAAQ,iBAGR,CACF,IAAMC,EAAW,YAAO1B,GACxB0B,EAAYvB,GAAOW,EACnBL,EAAWiB,GACXb,GAAYD,GACZD,EAAcD,EAAW,OA8BzB,8CAAmB,0BAAMb,MAAO,CAAC8B,MAAM,YAAab,MCpE5Dc,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.a2174b6d.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Square = ({value, onClick}) => {\nlet style = value? value : 'empty'\n    return(\n        <button className={style} onClick={onClick}>\n            {value}\n        </button>\n    )\n}\n\nexport default Square","import React from 'react'\nimport { Container } from 'react-bootstrap'\nimport Square from './Square'\n\nconst Board = ({squares, onClick}) => {\n    return(\n        <div className='board'>\n            {squares.map((square, index) => (\n                <Square key={index} value={square} onClick={() => onClick(index)} />\n            ))}\n        </div>\n    )\n}\n\nexport default Board","import React, {useState} from 'react'\nimport Board from './Board'\nimport swal from 'sweetalert'\nimport Container from 'react-bootstrap/Container'\n\nfunction calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n}\n\nconst Game = () =>{\n    const [squares, setSquares] = useState(new Array(9).fill(null))\n    const [stepNumber, setStepNumber] = useState(0)\n    const [xIsNext, setXisNext] = useState(true)\n    const nextPlayer = xIsNext ? 'X' : 'O'\n    const winner = calculateWinner(squares)\n\n    const handleClick = (index) => {\n      if (squares[index]){\n        swal(`The square is already occupied!`, `Please choose an empty square :)` , \"error\", {\n          button: 'Continue'\n        })\n      }\n      else{\n        const squaresCopy = [...squares]\n        squaresCopy[index]=nextPlayer\n        setSquares(squaresCopy)\n        setXisNext(!xIsNext)\n        setStepNumber(stepNumber+1)\n      } \n    }\n\n    if (winner){\n      setTimeout(() => {\n        swal(`The winner is ${winner}!`, `You can play a new round :)` , \"success\", {\n          button: 'Start a new game'\n        })\n        setSquares(new Array(9).fill(null))\n        setXisNext(true)\n        setStepNumber(0)\n      }, 500)\n    }\n  \n    if (stepNumber===9){\n      setTimeout( () => {\n        swal(`It is a tie!`, `You can play a new round :)` , \"info\", {\n          button: 'Start a new game'\n        })\n        setSquares(new Array(9).fill(null))\n        setXisNext(true)\n      }, 500)\n      setStepNumber(0)\n    }\n\n    return(\n      <div className='game'>\n        <h1>Tic Tac Toe Game</h1>\n        <Board squares={squares} onClick={handleClick} />\n        <h2>Now playing as <span style={{color:'#ac0808'}}>{nextPlayer}</span></h2>\n      </div>\n    )\n}\n\nexport default Game","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./components/Game\";\n\nReactDom.render(<Game />, document.getElementById(\"root\"));"],"sourceRoot":""}